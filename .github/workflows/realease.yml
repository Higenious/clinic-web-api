name: Deploy to AWS Fargate

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ... (Steps 1 through 5: Checkout, Node setup, AWS auth, ECR login, Tagging, Build/Push) are unchanged ...
      
      - name: Set ECR repository details
        id: ecr_details
        run: |
          echo "ECR_REPOSITORY=711538462588.dkr.ecr.us-east-1.amazonaws.com/myclinic-api" >> $GITHUB_ENV
          echo "CONTAINER_NAME=myclinic-app-container" >> $GITHUB_ENV # Ensure this matches your JSON!
          
      - name: Build, tag, and push image to ECR
        run: |
          docker build -t myclinic-api .
          docker tag myclinic-api:latest ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker tag myclinic-api:latest ${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.ECR_REPOSITORY }}:latest


      # 2. Render Task Definition JSON with the new image tag
      - name: Fill in the new image in the Task Definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-container
        with:
          task-definition: task-definition.json 
          container-name: ${{ env.CONTAINER_NAME }} 
          image: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} # Use the unique tag

      # 3. REGISTER and DEPLOY the service using the rendered JSON file
      - name: Register Task Definition and Deploy to ECS Fargate
        run: |
          # The render step outputs the path to the modified JSON file
          TASK_DEFINITION_FILE=${{ steps.render-container.outputs.task-definition }}
          
          # Register the new Task Definition with AWS and capture the ARN
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://$TASK_DEFINITION_FILE \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
            
          echo "Registered Task Definition ARN: $TASK_DEF_ARN"
          
          # Update the ECS service with the newly registered ARN
          aws ecs update-service \
            --cluster myclinic-cluster \
            --service myclincs-web-api-services \
            --task-definition $TASK_DEF_ARN \
            --force-new-deployment
